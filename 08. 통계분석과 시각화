#8-1 관심 지역 데이터만 추출하기

#1단계: 데이터 준비하기
library(sf)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
load("./06_geodataframe/06_apt_price.rdata")
load("./07_map/07_kde_high.rdata")
grid <- st_read("./01_code/sigun_grid/seoul.shp")

#2단계: 서울에서 가장 비싼 지역 찾기
library(tmap) #지도 위에 라벨값을 표현할 때 leaflet보다 편리하다
tmap_mode('view')  #tmap을 사용하기 전 기본 모드인 view로 설정해야 함
tm_shape(grid) + tm_borders() + tm_text("ID", col="red") + #그리드 그리기
  tm_shape(raster_high) + #래스터 이미지 그리기
  tm_raster(palette = c("blue","green","yellow","red"), alpha=.4) + #래스터 이미지 색상 패턴 설정
  tm_basemap(server = c('OpenStreetMap')) #기본 지도 설정

#3단계: 전체 지역/관심 지역 저장하기
library(dplyr)
apt_price <- st_join(apt_price, grid, join = st_intersects)
apt_price <- apt_price %>% st_drop_geometry() #공간 속성 지우기(일반적인 통계 분석을 할 때는 일반 데이터프레임이 편하기 때문)
all <- apt_price
sel <- apt_price %>% filter(ID == 81016)
dir.create("08_chart")
save(all, file ="./08_chart/all.rdata")
save(sel, file = "08_chart/sel.rdata")
rm(list = ls())



#8-2 확률 밀도 함수: 이 지역 아파트는 비싼 편일까?

#1단계: 확률 밀도 분포로 변환하기
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./08_chart/all.rdata")
load("./08_chart/sel.rdata")
max_all <- density(all$py) ; max_all <- max(max_all$y) #데이터 분포를 확률 밀도 분포로 변환 후 max()로 가장 큰 값을 찾는다
max_sel <- density(sel$py) ; max_sel <- max(max_sel$y)
plot_high <- max(max_all, max_sel)
rm(list = c("max_all", "max_sel"))
avg_all <- mean(all$py) #전체 지역 평당 평균가
avg_sel <- mean(sel$py) #관심 지역 평당 평균가
avg_all ; avg_sel ; plot_high

#2단계: 그래프 그리기
plot(stats::density(all$py), ylim=c(0, plot_high), #전체 지역 밀도 함수 띄우기
     col="blue", lwd=3, main=NA) 
abline(v = mean(all$py), lwd=2, col="blue", lty=2) #전체 지역 평균 수직선 그리기
text(avg_all + (avg_all)*0.15, plot_high*0.1, #전체 지역 평균 텍스트 입력
     sprintf("%.0f", avg_all), srt=0.2, col="blue")
lines(stats::density(sel$py), col="red", lwd=3) #관심 지역 확률 밀도 함수 띄우기
abline(v = avg_sel, lwd=2, col="red", lty=2) #관심 지역 평균 수직선 그리기
text(avg_sel + avg_sel*0.15, plot_high*0.1, #관심 지역 평균 텍스트 입력
     sprintf("%.0f", avg_sel), srt=0.2, col="red")



#8-3 회귀분석: 이 지역은 일년에 얼마나 오를까?

#1단계: 월별 거래가 요약하기
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./08_chart/all.rdata")
load("./08_chart/sel.rdata")
library(dplyr)
library(lubridate)
all <- all %>% group_by(month=floor_date(ymd, "month")) %>%
  summarize(all_py = mean(py))
sel <- sel %>% group_by(month=floor_date(ymd, "month")) %>%
  summarize(sel_py = mean(py))

#2단계: 회귀식 모델링하기
fit_all <- lm(all$all_py ~ all$month) #회귀 모델 생성
fit_sel <- lm(sel$sel_py ~ sel$month)
coef_all <- round(summary(fit_all)$coefficients[2], 1) * 365 #일별 변화량을 계산하고 연도별 가격 변화를 산출
coef_sel <- round(summary(fit_sel)$coefficients[2], 1) * 365

#3단계: 그래프 그리기
library(grid)
grob_1 <- grobTree(textGrob(paste0("전체 지역 ", coef_all, "만원(평당)"), x=0.05, y=0.88, hjust=0, #분기별 평당 가격 변화 주석 만들기
                            gp=gpar(col="blue", fontsize=13, fontface="italic")))
grob_2 <- grobTree(textGrob(paste0("관심 지역: ", coef_sel, "만원(평당)"), x=0.05, y=0.95, hjust=0,
                            gp=gpar(col="red", fontsize=16, gontface="bold")))

library(ggpmisc) #ggplot2와 함께 사용하여 회귀선을 시각화할 수 있음
gg <- ggplot(sel, aes(x=month, y=sel_py)) + #관심 지역 회귀선 그리기
  geom_line() + xlab("월") +ylab("가격") +
  theme(axis.text.x=element_text(angle=90)) +
  stat_smooth(method='lm', colour="dark grey", linetype="dashed") +
  theme_bw()

gg + geom_line(color = "red", size=1.5) + #전체 지역 회귀선 그리기
  geom_line(data=all, aes(x=month, y=all_py), color="blue", size=1.5) +
  
  annotation_custom(grob_1) + #주석 추가하기
  annotation_custom(grob_2) 

rm(list = ls())



#8-4 주성분 분석: 이 동네 단지별 특징은 무엇일까?

#1단계: 주성분 분석하기
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("./08_chart/sel.rdata")
pca_01 <- aggregate(list(sel$con_year, sel$floor, sel$py, sel$area), #아파트별 평균값 구하기
                    by = list(sel$apt_nm), mean)
colnames(pca_01) <- c("apt_nm", "신축", "층수", "가격", "면적")
m <- prcomp(~신축 + 층수 + 가격 + 면적, data=pca_01, scale=T) #주성분 분석
summary(m)

#2단계: 그래프 그리기
library(ggfortify)
autoplot(m, loadings.label=T, loadings.label.size=6) +
  geom_label(aes(label=pca_01$apt_nm), size=4)
